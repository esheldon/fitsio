## Process this file with automake to produce Makefile.in
#
# CFITSIO Makefile.am
#
# Author: B.Irby (NASA/GSFC), based on the previous CFITSIO Makefile.in

lib_LTLIBRARIES = libcfitsio.la

# Shared library version suffixes generated by libtool, used below
# for symbolic links:
soname_version = @version_info@
soname_version_lnx = ${soname_version}.0.0

include_HEADERS = fitsio.h fitsio2.h longnam.h drvrsmem.h \
	cfortran.h f77_wrap.h region.h

F77_WRAPPERS = f77_wrap1.c f77_wrap2.c f77_wrap3.c f77_wrap4.c

GSIFTP_SRC = drvrgsiftp.c

LIBS = @LIBS@
LIBS_CURL = @LIBS_CURL@

libcfitsio_la_SOURCES =	\
	buffers.c \
	cfileio.c \
	checksum.c \
	drvrfile.c \
	drvrmem.c \
	drvrnet.c \
	drvrsmem.c \
	editcol.c \
	edithdu.c \
	eval_l.c \
	eval_y.c \
	eval_f.c \
	fitscore.c \
	getcol.c \
	getcolb.c \
	getcold.c \
	getcole.c \
	getcoli.c \
	getcolj.c \
	getcolk.c \
	getcoll.c \
	getcols.c \
	getcolsb.c \
	getcoluk.c \
	getcolui.c \
	getcoluj.c \
	getkey.c \
	group.c \
	grparser.c \
	histo.c \
	iraffits.c \
	modkey.c \
	putcol.c \
	putcolb.c \
	putcold.c \
	putcole.c \
	putcoli.c \
	putcolj.c \
	putcolk.c \
	putcoluk.c \
	putcoll.c \
	putcols.c \
	putcolsb.c \
	putcolu.c \
	putcolui.c \
	putcoluj.c \
	putkey.c \
	region.c \
	scalnull.c \
	swapproc.c \
	wcssub.c \
	wcsutil.c \
	imcompress.c \
	quantize.c \
	ricecomp.c \
	pliocomp.c \
	fits_hcompress.c \
	fits_hdecompress.c \
	simplerng.c \
	zcompress.c \
	zuncompress.c

if !NOFORTRAN
libcfitsio_la_SOURCES += $(F77_WRAPPERS)
endif

if !NOGSIFTP
libcfitsio_la_SOURCES += ${GSIFTP_SRC}
endif

libcfitsio_la_CFLAGS = $(AM_CFLAGS) @DEFS@
libcfitsio_swapproc_la_CFLAGS = $(libcfitsio_la_CFLAGS) @SSE_FLAGS@
libcfitsio_la_LIBADD = -lm ${LIBS_CURL} ${LIBS}
libcfitsio_la_LDFLAGS = -version-info @version_info@

pkgconfigdir = $(libdir)/pkgconfig
pkgconfig_DATA = cfitsio.pc

# Add symbolic links for compatibility with older configuration:
install-exec-hook:
	@cd $(DESTDIR)$(libdir); \
	if test -f "lib${PACKAGE_NAME}.so.${soname_version_lnx}" -a \
		! -f lib${PACKAGE_NAME}.so.${soname_version}.${PACKAGE_VERSION}; then \
	    $(LN_S) lib${PACKAGE_NAME}.so.${soname_version_lnx} \
		    lib${PACKAGE_NAME}.so.${soname_version}.${PACKAGE_VERSION}; \
	fi; \
	if test -f "lib${PACKAGE_NAME}.${soname_version}.dylib" -a \
		! -f lib${PACKAGE_NAME}.${soname_version}.${PACKAGE_VERSION}.dylib; then \
	    $(LN_S) lib${PACKAGE_NAME}.${soname_version}.dylib \
		    lib${PACKAGE_NAME}.${soname_version}.${PACKAGE_VERSION}.dylib; \
	fi

# UTILITIES: =============================================================

#SUBDIRS = utilities

AUTOMAKE_OPTIONS = subdir-objects

bin_PROGRAMS = \
	cookbook \
	fitscopy \
	fitsverify \
	fpack \
	funpack \
	imcopy \
	smem \
	speed

noinst_PROGRAMS = testprog

if !NOFORTRAN

noinst_PROGRAMS+= testf77
testf77_SOURCES = utilities/testf77.f

endif

cookbook_SOURCES = utilities/cookbook.c

fitscopy_SOURCES = utilities/fitscopy.c

fitsverify_CFLAGS = -DSTANDALONE
fitsverify_SOURCES = utilities/ftverify.c utilities/fvrf_data.c \
		     utilities/fvrf_file.c utilities/fvrf_head.c \
		     utilities/fvrf_key.c utilities/fvrf_misc.c

fpack_SOURCES = utilities/fpack.c utilities/fpackutil.c
fpack_LDADD = -lm ${LDADD}

funpack_SOURCES = utilities/funpack.c utilities/fpackutil.c
funpack_LDADD = -lm ${LDADD}

imcopy_SOURCES = utilities/imcopy.c

smem_SOURCES = utilities/smem.c

speed_SOURCES = utilities/speed.c

testprog_SOURCES = utilities/testprog.c

LDADD = libcfitsio.la ${LIBS}

# eval: ==================================================================

FLEX =		flex
BISON =		bison

# Tested with bison 3.8 and flex 2.6.4
eval:		# Rebuild eval_* files from flex/bison source
		${FLEX} -o eval_l.c eval.l 
		${BISON} -o eval_y.c --header=eval_tab.h eval.y

# Distribution: ==========================================================


EXTRA_DIST = $(F77_WRAPPERS) ${GSIFTP_SRC} \
	docs licenses \
	README.md README.MacOS README.win \
	cfitsio.pc.cmake cfitsio.pc.in \
	cfitsio-config.cmake.in cfitsio-config-version.cmake.in \
	cfitsio.xcodeproj \
	CMakeLists.txt \
	eval.l eval.y \
	iter_a.f iter_a.fit iter_b.f iter_b.fit iter_c.f iter_c.fit \
	sample.tpl \
	testf77.out testf77.std \
	testprog.out testprog.std testprog.tpt
# windumpexts.c
# winDumpExts.mak

# clean: =================================================================

CLEANFILES = testprog.fit testf77.fit atestfil.fit btestfil.fit y.output

# HEASoft packages fitsTcl and POW need a list of all .o files: ==========

cfitsioLibObjs:
	@echo ${libcfitsio_la_SOURCES:.c=.o}
