name: tests

on:
  push:
    branches:
      - master
  pull_request: null

env:
  PY_COLORS: "1"
  # These compiler flags force the tests to fail if arrays are
  # accessed at the C level from an unaligned location.
  TEST_CFLAGS: "-fsanitize=alignment -fno-sanitize-recover=alignment"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: tests
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        config:
          - { pyver: "3.8", npver: "1"}
          - { pyver: "3.11", npver: "1.26"}
          - { pyver: "3.12", npver: "1.26"}
          - { pyver: "3.11", npver: "2.3.0"}
          - { pyver: "3.12", npver: "2.3.0"}
          - { pyver: "3.13", npver: "2.3.0"}

    runs-on: ${{ matrix.os }}
    env:
      PIP_OPTIONS: "--no-cache-dir --no-deps --no-build-isolation -v"

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f  # v3.2.0
        with:
          python-version: ${{ matrix.config.pyver }}
          channels: conda-forge
          channel-priority: strict
          show-channel-urls: true
          miniforge-version: latest

      - name: install conda deps
        shell: bash -l {0}
        run: |
          conda install \
            numpy=${{ matrix.config.npver }} \
            "setuptools-scm>=8" \
            wget \
            make \
            pytest \
            setuptools
          conda list

      - name: test bundled build
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip cache purge
          rm -rf build*
          rm -rf $HOME/cfitsio-static-install
          find . -name "*.so" -type f -delete
          pip install ${PIP_OPTIONS} -e .
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            pytest -vv fitsio
            python -c "import fitsio; assert not fitsio.cfitsio_has_bzip2_support()"
            python -c "import fitsio; assert not fitsio.cfitsio_has_curl_support()"
          else
            pytest -vv fitsio
            python -c "import fitsio; assert fitsio.cfitsio_has_bzip2_support()"
            python -c "import fitsio; assert fitsio.cfitsio_has_curl_support()"
          fi

      - name: install bzip2 and curl on linux
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install libbz2-dev curl libcurl4-openssl-dev

      - name: test install sdist .gz with no unit tests
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip cache purge
          rm -rf build*
          rm -rf $HOME/cfitsio-static-install
          find . -name "*.so" -type f -delete
          rm -rf dist

          python setup.py sdist

          pip install ${PIP_OPTIONS} dist/*.tar.gz
          cd ..
          python -c "import fitsio; assert not fitsio.__version__.startswith('0')"
          cd -
          pip uninstall fitsio --yes

      - name: test sdist
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip cache purge
          rm -rf build*
          rm -rf $HOME/cfitsio-static-install
          find . -name "*.so" -type f -delete
          rm -rf dist

          python setup.py sdist
          pushd dist/

          fname=$(ls fitsio*.gz)
          tar xvfz "$fname"
          dname=$(echo "$fname" | sed 's/\.tar\.gz//')
          pushd $dname

          pip install ${PIP_OPTIONS} -e .
          pytest -vv fitsio
          python -c "import fitsio; assert fitsio.cfitsio_has_bzip2_support()"
          python -c "import fitsio; assert fitsio.cfitsio_has_curl_support()"

          popd
          popd
