name: tests

on:
  push:
    branches:
      - master
  pull_request: null

env:
  PY_COLORS: "1"
  # These compiler flags force the tests to fail if arrays are
  # accessed at the C level from an unaligned location.
  TEST_CFLAGS: "-fsanitize=alignment -fno-sanitize-recover=alignment"
  LATEST_CFITSIO_VER: "-4.6.3"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: tests
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        config:
          # 3.44 is the last version that did not support uint64
          - { pyver: "3.8", npver: "1", cftsver: "3440"}
          # 4.1.0 is the first version for which tests pass for uint64
          - { pyver: "3.8", npver: "1", cftsver: "-4.1.0"}
          - { pyver: "3.8", npver: "1", cftsver: "latest"}
          - { pyver: "3.11", npver: "1.26", cftsver: "latest"}
          - { pyver: "3.12", npver: "1.26", cftsver: "latest"}
          - { pyver: "3.11", npver: "2.3.0", cftsver: "latest"}
          - { pyver: "3.12", npver: "2.3.0", cftsver: "latest"}
          - { pyver: "3.13", npver: "2.3.0", cftsver: "latest"}

    runs-on: ${{ matrix.os }}
    env:
      PIP_OPTIONS: "--no-cache-dir --no-deps --no-build-isolation -v"

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f  # v3.2.0
        with:
          python-version: ${{ matrix.config.pyver }}
          channels: conda-forge
          channel-priority: strict
          show-channel-urls: true
          miniforge-version: latest

      - name: install conda deps
        shell: bash -l {0}
        run: |
          conda install \
            numpy=${{ matrix.config.npver }} \
            "setuptools-scm>=8" \
            nose \
            cython \
            wget \
            make \
            pytest \
            flake8 \
            setuptools \
            compilers
          conda list

      - name: install bzip2 on linux
        shell: bash -l {0}
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install libbz2-dev

      - name: build external cfitsio
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          mkdir cfitsio-external-build
          cd cfitsio-external-build
          if [[ "${{ matrix.config.cftsver }}" == "latest" ]]; then
            cftsver=${LATEST_CFITSIO_VER}  
          else
            cftsver="${{ matrix.config.cftsver }}"
          fi
          
          if [[ "${{ matrix.config.cftsver }}" == *3.* ]]; then
            config_flags=""
          else
            config_flags="--without-fortran --disable-shared"
          fi

          cfitsio_name=cfitsio${cftsver}
          wget https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/${cfitsio_name}.tar.gz
          cfitsio_dir=`tar -tzf ${cfitsio_name}.tar.gz | sed -n "1,1p" | cut -f1 -d"/"`
          tar -xzvf ${cfitsio_name}.tar.gz
          cd ${cfitsio_dir}
          ./configure --prefix=$HOME/cfitsio-static-install ${config_flags}
          make install -j 4
          cd ..
          cd ..

      - name: test non-bundled build
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip install ${PIP_OPTIONS} -e . \
            --config-settings="--global-option=--use-system-fitsio" \
            --config-settings="--global-option=--system-fitsio-includedir=$HOME/cfitsio-static-install/include" \
            --config-settings="--global-option=--system-fitsio-libdir=$HOME/cfitsio-static-install/lib"
          SKIP_BZIP_TEST=true pytest -vv fitsio

      - name: test non-bundled build w/ env vars
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip cache purge
          rm -rf build*
          find . -name "*.so" -type f -delete
          export FITSIO_USE_SYSTEM_FITSIO=1
          export FITSIO_SYSTEM_FITSIO_INCLUDEDIR=$HOME/cfitsio-static-install/include
          export FITSIO_SYSTEM_FITSIO_LIBDIR=$HOME/cfitsio-static-install/lib
          pip install ${PIP_OPTIONS} -e .
          SKIP_BZIP_TEST=true pytest -vv fitsio

      - name: test bundled build
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip cache purge
          rm -rf build*
          rm -rf $HOME/cfitsio-static-install
          find . -name "*.so" -type f -delete
          pip install ${PIP_OPTIONS} -e .
          pytest -vv fitsio

      - name: test install sdist .gz with no unit tests
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip cache purge
          rm -rf build*
          rm -rf $HOME/cfitsio-static-install
          find . -name "*.so" -type f -delete
          rm -rf dist

          python setup.py sdist

          pip install ${PIP_OPTIONS} dist/*.tar.gz
          cd ..
          python -c "import fitsio; assert not fitsio.__version__.startswith('0')"
          cd -
          pip uninstall fitsio --yes

      - name: test sdist
        shell: bash -l {0}
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip cache purge
          rm -rf build*
          rm -rf $HOME/cfitsio-static-install
          find . -name "*.so" -type f -delete
          rm -rf dist

          python setup.py sdist
          pushd dist/

          fname=$(ls fitsio*.gz)
          tar xvfz "$fname"
          dname=$(echo "$fname" | sed 's/\.tar\.gz//')
          pushd $dname

          pip install ${PIP_OPTIONS} -e .
          pytest -vv fitsio

          popd
          popd

  tests-pypi:
    name: tests-pypi
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-22.04]
        pyver: ["3.8", "3.13"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-python@v6
        with:
          python-version: '${{ matrix.pyver }}'

      - name: install pip & setuptools
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools
          python -m pip install pytest

      - name: install bzip2 and other tools on linux
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install libbz2-dev wget make

      - name: build fitsio
        run: |
          export CFLAGS="${CFLAGS} ${TEST_CFLAGS}"

          pip install -v -e .

      - name: test fitsio
        run: |
          pytest -vv fitsio
